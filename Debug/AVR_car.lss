
AVR_car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000348  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000348  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800062  00800062  000003de  2**0
                  ALLOC
  3 .stab         00000a38  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e41  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00001c59  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	32 c0       	rjmp	.+100    	; 0x66 <__ctors_end>
   2:	00 00       	nop
   4:	96 c0       	rjmp	.+300    	; 0x132 <__vector_1>
   6:	00 00       	nop
   8:	a5 c0       	rjmp	.+330    	; 0x154 <__vector_2>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	a8 c0       	rjmp	.+336    	; 0x176 <__vector_9>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	fc 00       	.word	0x00fc	; ????
  56:	01 01       	movw	r0, r2
  58:	0b 01       	movw	r0, r22
  5a:	1a 01       	movw	r2, r20
  5c:	1f 01       	movw	r2, r30
  5e:	24 01       	movw	r4, r8
  60:	2d 01       	movw	r4, r26
  62:	3c 01       	movw	r6, r24
  64:	41 01       	movw	r8, r2

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d4 e0       	ldi	r29, 0x04	; 4
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e8 e4       	ldi	r30, 0x48	; 72
  7a:	f3 e0       	ldi	r31, 0x03	; 3
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0
  82:	a2 36       	cpi	r26, 0x62	; 98
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	a2 e6       	ldi	r26, 0x62	; 98
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	af 36       	cpi	r26, 0x6F	; 111
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	42 d1       	rcall	.+644    	; 0x31e <main>
  9a:	54 c1       	rjmp	.+680    	; 0x344 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <_Z14configure_pinsv>:
volatile uint8_t pwm_right = 0;

void
configure_pins()
{
	DETECTOR_DIR |= (_BV(COM_DETECTOR_OUTPUT_LEFT) | _BV(COM_DETECTOR_OUTPUT_RIGHT)); //0 - Õ¿—“–Œ… ¿ œ»Õ¿ Õ¿ «¿œ»—‹
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	82 61       	ori	r24, 0x12	; 18
  a2:	87 bb       	out	0x17, r24	; 23
	DETECTOR_DIR &= ~_BV(COM_DETECTOR_INPUT); //1 - Õ¿—“–Œ… ¿ œ»Õ¿ Õ¿ ◊“≈Õ»≈
  a4:	ba 98       	cbi	0x17, 2	; 23

	DETECTOR_PORT &= ~(_BV(COM_DETECTOR_OUTPUT_LEFT) | _BV(COM_DETECTOR_OUTPUT_RIGHT)); //«¿œ»—€¬¿≈Ã ¬ œŒ–“ Õ”À»
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	8d 7e       	andi	r24, 0xED	; 237
  aa:	88 bb       	out	0x18, r24	; 24
	//DETECTOR_PIN &= ~(_BV(COM_DETECTOR_INPUT)); //«¿œ»€¬¿≈Ã ¬ œ»Õ ÕŒÀ‹
	ENGINE_DIR |= _BV(ENGINE_LEFT) | _BV(ENGINE_RIGHT);
  ac:	81 b3       	in	r24, 0x11	; 17
  ae:	80 6a       	ori	r24, 0xA0	; 160
  b0:	81 bb       	out	0x11, r24	; 17
	ENGINE_PORT &= ~(_BV(ENGINE_LEFT) | _BV(ENGINE_RIGHT));
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	8f 75       	andi	r24, 0x5F	; 95
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	08 95       	ret

000000ba <_Z15configure_timerv>:
}

void
configure_timer()
{
	TCCR0 = _BV(CS02);
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	83 bf       	out	0x33, r24	; 51
	TIMSK |= _BV(TOIE0);
  be:	89 b7       	in	r24, 0x39	; 57
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	89 bf       	out	0x39, r24	; 57
  c4:	08 95       	ret

000000c6 <_Z7counterhh>:
}

bool
counter(uint8_t target, uint8_t max = 100) //‘”Õ ÷»ﬂ Œ¡Õ”À≈Õ»ﬂ —◊®“◊» ¿
{
  c6:	28 2f       	mov	r18, r24
	/*cnt0++;
	if (cnt0 == 10) cnt0 = 0;
	return cnt0;*/

	if (cnt0 > max) cnt0 = 0;
  c8:	80 91 6c 00 	lds	r24, 0x006C
  cc:	68 17       	cp	r22, r24
  ce:	10 f4       	brcc	.+4      	; 0xd4 <_Z7counterhh+0xe>
  d0:	10 92 6c 00 	sts	0x006C, r1
	return cnt0++ > target;
  d4:	90 91 6c 00 	lds	r25, 0x006C
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	89 0f       	add	r24, r25
  dc:	80 93 6c 00 	sts	0x006C, r24
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	29 17       	cp	r18, r25
  e4:	08 f0       	brcs	.+2      	; 0xe8 <_Z7counterhh+0x22>
  e6:	80 e0       	ldi	r24, 0x00	; 0
}
  e8:	08 95       	ret

000000ea <_Z13delay_counterhh>:

bool
delay_counter(uint8_t target, uint8_t max = 100) //‘”Õ ÷»ﬂ Œ¡Õ”À≈Õ»ﬂ —◊®“◊» ¿
{
  ea:	28 2f       	mov	r18, r24
	/*cnt2++;
	if (cnt2 == 92) cnt2 = 0;
	return cnt2;*/

	if (cnt2 > max) cnt2 = 0;
  ec:	80 91 6a 00 	lds	r24, 0x006A
  f0:	68 17       	cp	r22, r24
  f2:	10 f4       	brcc	.+4      	; 0xf8 <_Z13delay_counterhh+0xe>
  f4:	10 92 6a 00 	sts	0x006A, r1
	return cnt2++ > target;
  f8:	90 91 6a 00 	lds	r25, 0x006A
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	89 0f       	add	r24, r25
 100:	80 93 6a 00 	sts	0x006A, r24
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	29 17       	cp	r18, r25
 108:	08 f0       	brcs	.+2      	; 0x10c <_Z13delay_counterhh+0x22>
 10a:	80 e0       	ldi	r24, 0x00	; 0
}
 10c:	08 95       	ret

0000010e <_Z11pwm_counterhh>:

bool
pwm_counter(uint8_t target, uint8_t max = 100)
{
 10e:	28 2f       	mov	r18, r24
	if (cnt1 > max) cnt1 = 0;
 110:	80 91 6b 00 	lds	r24, 0x006B
 114:	68 17       	cp	r22, r24
 116:	10 f4       	brcc	.+4      	; 0x11c <_Z11pwm_counterhh+0xe>
 118:	10 92 6b 00 	sts	0x006B, r1
	return cnt1++ > target;
 11c:	90 91 6b 00 	lds	r25, 0x006B
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	89 0f       	add	r24, r25
 124:	80 93 6b 00 	sts	0x006B, r24
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	29 17       	cp	r18, r25
 12c:	08 f0       	brcs	.+2      	; 0x130 <_Z11pwm_counterhh+0x22>
 12e:	80 e0       	ldi	r24, 0x00	; 0
}
 130:	08 95       	ret

00000132 <__vector_1>:

ISR(INT0_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
	speed_cnt_left++;
 13e:	80 91 67 00 	lds	r24, 0x0067
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	80 93 67 00 	sts	0x0067, r24
}
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__vector_2>:

ISR(INT1_vect)
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
	speed_cnt_right++;
 160:	80 91 66 00 	lds	r24, 0x0066
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	80 93 66 00 	sts	0x0066, r24
}
 16a:	8f 91       	pop	r24
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	2f 93       	push	r18
 182:	3f 93       	push	r19
 184:	4f 93       	push	r20
 186:	5f 93       	push	r21
 188:	6f 93       	push	r22
 18a:	7f 93       	push	r23
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	af 93       	push	r26
 192:	bf 93       	push	r27
 194:	cf 93       	push	r28
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
	speed_left = speed_cnt_left * dt;
 19a:	80 91 67 00 	lds	r24, 0x0067
 19e:	80 93 65 00 	sts	0x0065, r24
	speed_right = speed_cnt_right * dt;
 1a2:	80 91 66 00 	lds	r24, 0x0066
 1a6:	80 93 64 00 	sts	0x0064, r24

	speed_cnt_left = 0;
 1aa:	10 92 67 00 	sts	0x0067, r1
	speed_cnt_right = 0;
 1ae:	10 92 66 00 	sts	0x0066, r1

	pwm_left  += k * (desired_speed - speed_left);
 1b2:	20 91 65 00 	lds	r18, 0x0065
 1b6:	40 91 63 00 	lds	r20, 0x0063
 1ba:	8e e1       	ldi	r24, 0x1E	; 30
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	bc 01       	movw	r22, r24
 1c0:	62 1b       	sub	r22, r18
 1c2:	71 09       	sbc	r23, r1
 1c4:	9b 01       	movw	r18, r22
 1c6:	24 0f       	add	r18, r20
 1c8:	31 1d       	adc	r19, r1
 1ca:	20 93 63 00 	sts	0x0063, r18
	pwm_right += k * (desired_speed - speed_right);
 1ce:	30 91 64 00 	lds	r19, 0x0064
 1d2:	20 91 62 00 	lds	r18, 0x0062
 1d6:	83 1b       	sub	r24, r19
 1d8:	91 09       	sbc	r25, r1
 1da:	82 0f       	add	r24, r18
 1dc:	91 1d       	adc	r25, r1
 1de:	80 93 62 00 	sts	0x0062, r24

	switch(cmd) {
 1e2:	80 91 6e 00 	lds	r24, 0x006E
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	89 30       	cpi	r24, 0x09	; 9
 1ea:	91 05       	cpc	r25, r1
 1ec:	08 f0       	brcs	.+2      	; 0x1f0 <__vector_9+0x7a>
 1ee:	6b c0       	rjmp	.+214    	; 0x2c6 <__vector_9+0x150>
 1f0:	fc 01       	movw	r30, r24
 1f2:	e6 5d       	subi	r30, 0xD6	; 214
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	a0 c0       	rjmp	.+320    	; 0x338 <__tablejump2__>
 1f8:	c4 9a       	sbi	0x18, 4	; 24
	case 0: //¬ Àﬁ◊≈Õ»≈ À≈¬Œ√Œ ƒ¿“◊» ¿
		DETECTOR_PORT |= _BV(COM_DETECTOR_OUTPUT_LEFT);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
		cmd = 1;
 1fc:	80 93 6e 00 	sts	0x006E, r24
 200:	62 c0       	rjmp	.+196    	; 0x2c6 <__vector_9+0x150>
		break;
 202:	64 e6       	ldi	r22, 0x64	; 100
	case 1: //Õ»◊≈√Œ Õ≈ ƒ≈À¿“‹
		if (counter(8)) cmd = 2;
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	5f df       	rcall	.-322    	; 0xc6 <_Z7counterhh>
 208:	88 23       	and	r24, r24
 20a:	09 f4       	brne	.+2      	; 0x20e <__vector_9+0x98>
 20c:	5c c0       	rjmp	.+184    	; 0x2c6 <__vector_9+0x150>
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	80 93 6e 00 	sts	0x006E, r24
 214:	58 c0       	rjmp	.+176    	; 0x2c6 <__vector_9+0x150>
 216:	b2 9b       	sbis	0x16, 2	; 22
 218:	03 c0       	rjmp	.+6      	; 0x220 <__vector_9+0xaa>
		break;
	case 2: // —◊»“€¬¿≈Õ»≈ »« À≈¬Œ√Œ ƒ¿“◊» ¿
		if (DETECTOR_PIN & _BV(COM_DETECTOR_INPUT)) right_wh = true;//ENGINE_PORT |= _BV(ENGINE_RIGHT)
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 60 00 	sts	0x0060, r24
 220:	80 91 60 00 	lds	r24, 0x0060
		//if (detector == 0b00000100) right_wh = true;
		if(!right_wh) right_engine_run = false;
 224:	81 11       	cpse	r24, r1
 226:	02 c0       	rjmp	.+4      	; 0x22c <__vector_9+0xb6>
 228:	10 92 68 00 	sts	0x0068, r1
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	80 93 6e 00 	sts	0x006E, r24
		cmd = 3;
 232:	49 c0       	rjmp	.+146    	; 0x2c6 <__vector_9+0x150>
 234:	c4 98       	cbi	0x18, 4	; 24
		break;
 236:	84 e0       	ldi	r24, 0x04	; 4
	case 3: //¬€ Àﬁ◊≈Õ»≈ À≈¬Œ√Œ ƒ¿“◊» ¿
		DETECTOR_PORT &= ~(_BV(COM_DETECTOR_OUTPUT_LEFT));
 238:	80 93 6e 00 	sts	0x006E, r24
		cmd = 4;
 23c:	44 c0       	rjmp	.+136    	; 0x2c6 <__vector_9+0x150>
 23e:	c1 9a       	sbi	0x18, 1	; 24
		break;
 240:	85 e0       	ldi	r24, 0x05	; 5
	case 4:
		DETECTOR_PORT |= _BV(COM_DETECTOR_OUTPUT_RIGHT);
 242:	80 93 6e 00 	sts	0x006E, r24
		cmd = 5;
 246:	3f c0       	rjmp	.+126    	; 0x2c6 <__vector_9+0x150>
 248:	64 e6       	ldi	r22, 0x64	; 100
		break;
 24a:	88 e0       	ldi	r24, 0x08	; 8
	case 5:
		if(counter(8)) cmd = 6;
 24c:	3c df       	rcall	.-392    	; 0xc6 <_Z7counterhh>
 24e:	88 23       	and	r24, r24
 250:	d1 f1       	breq	.+116    	; 0x2c6 <__vector_9+0x150>
 252:	86 e0       	ldi	r24, 0x06	; 6
 254:	80 93 6e 00 	sts	0x006E, r24
 258:	36 c0       	rjmp	.+108    	; 0x2c6 <__vector_9+0x150>
 25a:	b2 9b       	sbis	0x16, 2	; 22
 25c:	03 c0       	rjmp	.+6      	; 0x264 <__vector_9+0xee>
 25e:	81 e0       	ldi	r24, 0x01	; 1
		break;
	case 6:
		if (DETECTOR_PIN & _BV(COM_DETECTOR_INPUT)) left_wh = true;
 260:	80 93 61 00 	sts	0x0061, r24
 264:	80 91 61 00 	lds	r24, 0x0061
 268:	81 11       	cpse	r24, r1
		//if (detector == 0b00000100) left_wh = true;
		if(!left_wh) left_engine_run = false;
 26a:	02 c0       	rjmp	.+4      	; 0x270 <__vector_9+0xfa>
 26c:	10 92 69 00 	sts	0x0069, r1
 270:	87 e0       	ldi	r24, 0x07	; 7
 272:	80 93 6e 00 	sts	0x006E, r24
		cmd = 7;
 276:	27 c0       	rjmp	.+78     	; 0x2c6 <__vector_9+0x150>
 278:	c1 98       	cbi	0x18, 1	; 24
 27a:	88 e0       	ldi	r24, 0x08	; 8
		break;
 27c:	80 93 6e 00 	sts	0x006E, r24
	case 7:
		DETECTOR_PORT &= ~(_BV(COM_DETECTOR_OUTPUT_RIGHT));
		cmd = 8;
 280:	22 c0       	rjmp	.+68     	; 0x2c6 <__vector_9+0x150>
 282:	80 91 61 00 	lds	r24, 0x0061
		break;
 286:	88 23       	and	r24, r24
	case 8:
		if(left_wh) {
 288:	19 f0       	breq	.+6      	; 0x290 <__vector_9+0x11a>
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 69 00 	sts	0x0069, r24
			left_engine_run = true;
 290:	80 91 60 00 	lds	r24, 0x0060
 294:	88 23       	and	r24, r24
			//ENGINE_PORT |= _BV(ENGINE_LEFT);
		}
		if(right_wh) {
 296:	19 f0       	breq	.+6      	; 0x29e <__vector_9+0x128>
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 93 68 00 	sts	0x0068, r24
			right_engine_run = true;
 29e:	80 91 63 00 	lds	r24, 0x0063
 2a2:	64 e6       	ldi	r22, 0x64	; 100
			//ENGINE_PORT |= _BV(ENGINE_RIGHT);
		}
		if(delay_counter(pwm_left)) {
 2a4:	22 df       	rcall	.-444    	; 0xea <_Z13delay_counterhh>
 2a6:	88 23       	and	r24, r24
 2a8:	21 f0       	breq	.+8      	; 0x2b2 <__vector_9+0x13c>
 2aa:	10 92 6e 00 	sts	0x006E, r1
 2ae:	10 92 61 00 	sts	0x0061, r1
			cmd = 0;
 2b2:	80 91 62 00 	lds	r24, 0x0062
			left_wh = false;
 2b6:	64 e6       	ldi	r22, 0x64	; 100
 2b8:	18 df       	rcall	.-464    	; 0xea <_Z13delay_counterhh>
		}
		if (delay_counter(pwm_right))
 2ba:	88 23       	and	r24, r24
 2bc:	21 f0       	breq	.+8      	; 0x2c6 <__vector_9+0x150>
 2be:	10 92 6e 00 	sts	0x006E, r1
 2c2:	10 92 60 00 	sts	0x0060, r1
 2c6:	c0 91 69 00 	lds	r28, 0x0069
		{
			cmd = 0;
 2ca:	80 91 63 00 	lds	r24, 0x0063
			right_wh = false;
 2ce:	64 e6       	ldi	r22, 0x64	; 100
		}
	}
	if (left_engine_run & pwm_counter(pwm_left)) ENGINE_PORT |= _BV(ENGINE_LEFT);
 2d0:	1e df       	rcall	.-452    	; 0x10e <_Z11pwm_counterhh>
 2d2:	88 23       	and	r24, r24
 2d4:	21 f0       	breq	.+8      	; 0x2de <__vector_9+0x168>
 2d6:	cc 23       	and	r28, r28
 2d8:	11 f0       	breq	.+4      	; 0x2de <__vector_9+0x168>
 2da:	97 9a       	sbi	0x12, 7	; 18
 2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <__vector_9+0x16a>
 2de:	97 98       	cbi	0x12, 7	; 18
 2e0:	c0 91 68 00 	lds	r28, 0x0068
 2e4:	80 91 62 00 	lds	r24, 0x0062
 2e8:	64 e6       	ldi	r22, 0x64	; 100
	else ENGINE_PORT &= ~_BV(ENGINE_LEFT);
 2ea:	11 df       	rcall	.-478    	; 0x10e <_Z11pwm_counterhh>

	if (right_engine_run & pwm_counter(pwm_right)) ENGINE_PORT |= _BV(ENGINE_RIGHT);
 2ec:	88 23       	and	r24, r24
 2ee:	21 f0       	breq	.+8      	; 0x2f8 <__vector_9+0x182>
 2f0:	cc 23       	and	r28, r28
 2f2:	11 f0       	breq	.+4      	; 0x2f8 <__vector_9+0x182>
 2f4:	95 9a       	sbi	0x12, 5	; 18
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <__vector_9+0x184>
 2f8:	95 98       	cbi	0x12, 5	; 18
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	cf 91       	pop	r28
 300:	bf 91       	pop	r27
 302:	af 91       	pop	r26
 304:	9f 91       	pop	r25
	else ENGINE_PORT &= ~_BV(ENGINE_RIGHT);
 306:	8f 91       	pop	r24

}
 308:	7f 91       	pop	r23
 30a:	6f 91       	pop	r22
 30c:	5f 91       	pop	r21
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <main>:

int
main(void)
{
	cli();
 31e:	f8 94       	cli

	configure_pins();
 320:	be de       	rcall	.-644    	; 0x9e <_Z14configure_pinsv>
 322:	cb de       	rcall	.-618    	; 0xba <_Z15configure_timerv>
	configure_timer();
 324:	78 94       	sei
 326:	86 b3       	in	r24, 0x16	; 22

	sei();
 328:	80 93 6d 00 	sts	0x006D, r24

	while (1)
	{
		detector = DETECTOR_PIN;
 32c:	80 91 6d 00 	lds	r24, 0x006D
		detector &= 0b00000100;
 330:	84 70       	andi	r24, 0x04	; 4
 332:	80 93 6d 00 	sts	0x006D, r24
 336:	f7 cf       	rjmp	.-18     	; 0x326 <main+0x8>

00000338 <__tablejump2__>:
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31

0000033c <__tablejump__>:
 33c:	05 90       	lpm	r0, Z+
 33e:	f4 91       	lpm	r31, Z
 340:	e0 2d       	mov	r30, r0
 342:	09 94       	ijmp

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
